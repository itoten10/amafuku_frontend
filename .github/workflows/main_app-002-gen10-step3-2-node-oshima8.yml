# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - app-002-gen10-step3-2-node-oshima8

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: npm install, build, and test
        run: |
          # Âº∑Âà∂ÁöÑ„Å´ÂÖ®„Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢
          npm cache clean --force
          rm -rf node_modules
          rm -rf .next
          rm -rf package-lock.json
          
          # Êñ∞„Åó„ÅÑ„Ç§„É≥„Çπ„Éà„Éº„É´ (Azure tar.gz‰ΩúÊàê„ÇíÁÑ°ÂäπÂåñ)
          npm install --no-optional
          
          # CRITICAL: Azure tar.gz‰ΩúÊàê„ÇíÈò≤„Åê„Åü„ÇÅ package-lock.jsonÂâäÈô§
          echo "üö´ Removing package-lock.json to prevent Azure tar.gz creation"
          rm -f package-lock.json
          
          # „Éï„É¨„ÉÉ„Ç∑„É•„Éì„É´„Éâ„Åß„ÇΩ„Éº„Çπ„Éï„Ç°„Ç§„É´Á¢∫Ë™ç
          echo "üîç Source files before build:"
          ls -la app/api/auth/
          ls -la app/auth/
          
          npm run build
          npm run test --if-present
          
          # „Éì„É´„ÉâÁµêÊûú„ÅÆË©≥Á¥∞Á¢∫Ë™ç
          echo "üì¶ Fresh build completed:"
          ls -la .next/ | head -10
          echo "üîç Built API routes:"
          find .next -name "*auth*" -type f || echo "No auth files found"
          echo "üîç Built server routes:"
          ls -la .next/server/app/api/ || echo "No API directory found"

      - name: Create deployment package  
        run: |
          # Create a clean package for deployment
          rm -rf deploy-package
          mkdir -p deploy-package
          
          # CRITICAL: Copy .next folder with force overwrite
          echo "üì¶ Force copying .next build folder..."
          cp -rf .next deploy-package/
          
          # Verify .next was copied completely
          echo "üîç Deployment package .next verification:"
          ls -la deploy-package/.next/ | head -10
          
          # Verify API routes were copied
          echo "üîç Verifying API routes in deployment package:"
          ls -la deploy-package/.next/server/app/api/ || echo "‚ùå NO API DIRECTORY"
          ls -la deploy-package/.next/server/app/api/auth/ || echo "‚ùå NO AUTH API"
          ls -la deploy-package/.next/server/app/api/health/ || echo "‚ùå NO HEALTH API"
          
          # Copy other essential files
          cp -r public deploy-package/ 2>/dev/null || (echo "Creating empty public directory" && mkdir -p deploy-package/public)
          cp package.json deploy-package/
          cp server.js deploy-package/
          cp startup.sh deploy-package/
          chmod +x deploy-package/startup.sh
          cp next.config.js deploy-package/
          cp web.config deploy-package/
          
          # Copy source files (required for Next.js App Router)
          cp -r app deploy-package/
          cp -r components deploy-package/ 2>/dev/null || echo "No components directory"
          cp -r types deploy-package/ 2>/dev/null || echo "No types directory"
          
          # Copy config files
          cp tailwind.config.js deploy-package/ 2>/dev/null || echo "No tailwind config"
          cp postcss.config.js deploy-package/ 2>/dev/null || echo "No postcss config"
          cp tsconfig.json deploy-package/ 2>/dev/null || echo "No tsconfig"
          
          # CRITICAL: Create .deployment file at ROOT to disable Oryx
          echo "üö´ Creating .deployment at project root to disable Oryx build..."
          echo "[config]" > .deployment
          echo "SCM_DO_BUILD_DURING_DEPLOYMENT=false" >> .deployment
          echo "WEBSITE_DISABLE_NODE_MODULES_COMPRESSION=true" >> .deployment
          
          # Copy to deploy package too
          cp .deployment deploy-package/
          
          # Copy node_modules for instant startup
          echo "üì¶ Force copying node_modules..."
          cp -r node_modules deploy-package/
          
          # Verify essential modules exist
          echo "üîç Verifying Next.js binary..."
          if [ ! -f "deploy-package/node_modules/.bin/next" ]; then
              echo "‚ùå CRITICAL: Next.js missing from node_modules!"
              exit 1
          fi
          
          # VERIFY .next exists and will be preserved
          echo "üîç FINAL .next verification:"
          ls -la deploy-package/.next/ | head -5 || echo "‚ùå .next MISSING!"
          ls -la deploy-package/.next/server/app/api/ || echo "‚ùå API ROUTES MISSING!"
          
          echo "‚úÖ Azure will install node_modules from package.json without tar.gz"
          
          # Copy environment files
          cp .env.production deploy-package/ 2>/dev/null || echo "No .env.production"
          cp auth.ts deploy-package/ 2>/dev/null || echo "No auth.ts"
          cp middleware.ts deploy-package/ 2>/dev/null || echo "No middleware.ts"
          
          # List what we're deploying
          echo "üì¶ FINAL Deployment package contents:"
          ls -la deploy-package/
          echo "üì¶ FINAL API routes verification:"
          find deploy-package -name "route.js" -path "*/api/*" || echo "‚ùå NO ROUTE.JS FILES FOUND"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deploy-package/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
      
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'app-002-gen10-step3-2-node-oshima8'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_4639FE8C51144D70B8C3A9508C544971 }}